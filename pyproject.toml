[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "semiosis"
version = "0.1.0"
description = "Semantic Information Theory-based Agent Evaluation Framework"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "AnswerLayer Team", email = "team@answerlayer.com"}
]
maintainers = [
    {name = "Josh Harris", email = "josh@answerlayer.com"}
]
keywords = [
    "ai", "llm", "evaluation", "semantic-information-theory", 
    "agent-evaluation", "text-to-sql", "dbt"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    "click>=8.0.0",
    "pydantic>=2.0.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "pyyaml>=6.0",
    "typing-extensions>=4.0.0",
    # Agent dependencies
    "openai>=1.0.0",
    "anthropic>=0.25.0",
    "tiktoken>=0.5.0",
    # Environment dependencies
    "sqlparse>=0.4.0",
    # Context dependencies
    "dbt-core>=1.7.0",
    # Analysis dependencies
    "scipy>=1.10.0",
    "scikit-learn>=1.3.0",
    # Visualization dependencies
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]
docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
]
bird = [
    "duckdb>=0.8.0",
    "pyarrow>=12.0.0",
]
local-models = [
    "transformers>=4.30.0",
    "torch>=2.0.0",
    "accelerate>=0.20.0",
    "vllm>=0.2.0",
]
all = [
    "semiosis[dev,docs,bird,local-models]"
]

[project.urls]
Homepage = "https://github.com/answerlayer/semiosis"
Documentation = "https://semiosis.readthedocs.io"
Repository = "https://github.com/answerlayer/semiosis"
"Bug Tracker" = "https://github.com/answerlayer/semiosis/issues"
"Linear Project" = "https://linear.app/answerlayer/project/semiosis-d7f5a4c8"

[project.scripts]
semiosis = "semiosis.cli.main:cli"

[tool.setuptools.packages.find]
where = ["."]
include = ["semiosis*"]
exclude = ["tests*"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["semiosis"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "dbt.*",
    "sqlparse.*",
    "anthropic.*",
    "tiktoken.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "--cov=semiosis --cov-report=html --cov-report=term-missing"
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "e2e: End-to-end tests",
    "slow: Slow tests",
    "requires_api: Tests requiring API keys",
]

[tool.coverage.run]
source = ["semiosis"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]